import express from 'express'
import LeanProject from '../mongodb/models/leanProject.js'
import Notification from '../mongodb/models/notification.js'
import { ai, cleanData, formatPrompt } from "../utils/geminiUtils.js";


const router = express.Router()

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
router.post('/', async (req, res) => {
  try {
    const { author, authorName, name, ...rest } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
    const existing = await LeanProject.findOne({ author, name });
    if (existing) {
      return res.status(400).json({ message: '–ü—Ä–æ—î–∫—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    const newProject = new LeanProject({
      ...rest,
      name,
      author,
      authorName,
      participants: [{ user: author, role: 'admin' }],
    });

    const saved = await newProject.save();
    res.status(200).json(saved);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ—î–∫—Ç–∏, –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî —É—á–∞—Å–Ω–∏–∫
router.get('/shared/:userId', async (req, res) => {
  try {
    const userId = req.params.userId

    const projects = await LeanProject.find({
      participants: {
        $elemMatch: { user: userId },
      },
    })

    res.status(200).json(projects)
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—ñ–≤', error })
  }
})

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ—î–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–≤—Ç–æ—Ä–∞)
router.get('/user/:userId', async (req, res) => {
  try {
    const projects = await LeanProject.find({ author: req.params.userId })
    res.status(200).json(projects)
  } catch (error) {
    res.status(500).json({ message: error.message })
  }
})

// –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
router.put('/:id', async (req, res) => {
  try {
    console.log("–í–•–Ü–î–ù–Ü –î–ê–ù–Ü:", req.body); // üí• –î–û–î–ê–ô –¶–ï

    const updated = await LeanProject.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true },
    );

    res.status(200).json(updated);
  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –û–ù–û–í–õ–ï–ù–ù–Ø:", err); // üí• –Ü –¶–ï
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ', error: err.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ userId
router.get('/agents/:userId', async (req, res) => {
  try {
    const userId = req.params.userId

    // 1) –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ userId –≤ participants
    const projects = await LeanProject.find({
      'participants.user': userId
    }).populate('participants.user', 'name email avatar') // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // 2) –°–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ userId
    const allAgents = []
    projects.forEach(proj => {
      proj.participants.forEach(p => {
        const uid = p.user._id.toString()
        if (uid !== userId) {
          allAgents.push(p.user)
        }
      })
    })

    // 3) –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id
    const uniqueMap = new Map()
    allAgents.forEach(u => uniqueMap.set(u._id.toString(), u))
    const uniqueAgents = Array.from(uniqueMap.values())

    res.json(uniqueAgents)
  } catch (err) {
    console.error('Error fetching agents:', err)
    res.status(500).json({ message: err.message })
  }
})

// –î–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞ –¥–æ –ø—Ä–æ—î–∫—Ç—É
router.put('/:id/add-user', async (req, res) => {
  const { userId } = req.body

  try {
    const project = await LeanProject.findById(req.params.id)
    if (!project) return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –≤–∂–µ —î –≤ participants?
    const alreadyParticipant = project.participants.some((p) => p.user.toString() === userId)
    if (alreadyParticipant) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —É—á–∞—Å–Ω–∏–∫ –ø—Ä–æ—î–∫—Ç—É' })
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –≤–∂–µ —î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è?
    const existingInvite = await Notification.findOne({
      to: userId,
      projectId: req.params.id,
      status: 'pending',
    })
    if (existingInvite) {
      return res.status(400).json({ message: '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' })
    }

    // –Ø–∫—â–æ –≤—Å–µ –æ–∫ ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
    await Notification.create({
      to: userId,
      projectId: req.params.id,
      projectName: project.name,
    })

    res.status(200).json({ message: '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' })
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
})

// –í–∏–¥–∞–ª–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –ø—Ä–æ—î–∫—Ç—É
router.delete('/:projectId/remove-user/:userId', async (req, res) => {
  try {
    const { projectId, userId } = req.params;

    const project = await LeanProject.findById(projectId);
    if (!project) return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const user = project.participants.find(p => p.user.toString() === userId);
    if (user?.role === 'admin') {
      return res.status(400).json({ message: '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const updated = await LeanProject.findByIdAndUpdate(
      projectId,
      { $pull: { participants: { user: userId } } },
      { new: true }
    );

    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω –ø—Ä–æ—î–∫—Ç –∑–∞ ID
router.get('/:id', async (req, res) => {
  try {
    const project = await LeanProject.findById(req.params.id).populate('participants.user')
    if (!project) {
      return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
    }
    res.status(200).json(project)
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—É', error })
  }
})

// –í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ—Å—å –ø—Ä–æ—î–∫—Ç
router.delete('/:id', async (req, res) => {
  try {
    await LeanProject.findByIdAndDelete(req.params.id)
    res.status(200).json({ message: '–ü—Ä–æ—î–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ' })
  } catch (err) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—É', error: err })
  }
})


// POST /lean/:id/analyze
router.post('/:id/analyze', async (req, res) => {
  try {
    const project = await LeanProject.findById(req.params.id).lean();
    if (!project) return res.status(404).json({ message: '–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const cleaned = cleanData(project);
    const prompt = formatPrompt(cleaned);

    const result = await ai.models.generateContent({
      model: "gemini-2.0-flash", // –∞–±–æ gemini-1.5-pro —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
      contents: [{ parts: [{ text: prompt }] }]
    });
    console.log("üß† FULL Gemini RESULT:", JSON.stringify(result, null, 2));


    const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || "ü§ñ Gemini –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.";

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –ë–î
    await LeanProject.findByIdAndUpdate(req.params.id, { $set: { aiAnalysis: text } });

    console.log("‚úÖ AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:", text);
    res.status(200).json({ result: text });

  } catch (err) {
    console.error("‚ùå Lean Analyze Error:", err.message);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ—î–∫—Ç—É" });
  }
});

export default router
