import React, { useEffect, useState } from "react";
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Divider,
} from "@mui/material";
import { useGetIdentity } from "@pankod/refine-core";
import { useNavigate } from "@pankod/refine-react-router-v6";
import { Grid } from "@mui/material";

export const MyLeanProjects = () => {
  const { data: user } = useGetIdentity();
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const [ownRes, sharedRes] = await Promise.all([
          fetch(`${process.env.REACT_APP_BACKEND_URL}/lean/user/${user?.userid}`),
          fetch(`${process.env.REACT_APP_BACKEND_URL}/lean/shared/${user?.userid}`),
        ]);

        const [ownProjects, sharedProjects] = await Promise.all([
          ownRes.json(),
          sharedRes.json(),
        ]);

        const merged = [...ownProjects, ...sharedProjects];

        // ‚úÖ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª—ñ
        const uniqueProjects = Array.from(
          new Map(merged.map(p => [p._id, p])).values()
        );

        setProjects(uniqueProjects);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç—ñ–≤:", err);
      } finally {
        setLoading(false);
      }
    };

    if (user?.userid) fetchProjects();
  }, [user?.userid]);


  if (loading) return <Typography>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Typography>;

  if (selectedProject) {
    const p = selectedProject;
    return (
      <Box p={4}>
        <Typography variant="h4" gutterBottom>
          {p.name}
        </Typography>

        <Typography variant="subtitle1" gutterBottom>
          <strong>–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:</strong> {p.description}
        </Typography>

        <Typography variant="subtitle1">
          <strong>–¶—ñ–ª—å –ø—Ä–æ—î–∫—Ç—É (SMART):</strong> {p.goal || "‚Äì"}
        </Typography>
        <Typography variant="subtitle1">
          <strong>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π:</strong> {p.owner || user?.name}
        </Typography>
        <Typography variant="subtitle1">
          <strong>–ö–æ–º–∞–Ω–¥–∞:</strong> {p.team || "‚Äì"}
        </Typography>
        <Typography variant="subtitle1">
          <strong>–í—ñ–¥–¥—ñ–ª / –£—á–∞—Å—Ç–æ–∫:</strong> {p.department || "‚Äì"}
        </Typography>
        <Typography variant="subtitle1">
          <strong>–î–∞—Ç–∞:</strong> {p.startDate || "‚Äì"} ‚Äì {p.endDate || "‚Äì"}
        </Typography>

        <Divider sx={{ my: 3 }} />

        <Typography variant="h6">üìÑ –®–∞–±–ª–æ–Ω–∏:</Typography>

        <Box mt={2}>
          <Typography><strong>A3-–ó–≤—ñ—Ç</strong></Typography>
          <ul>
            <li>–ü—Ä–æ–±–ª–µ–º–∞: {p.description}</li>
            <li>–¶—ñ–ª—å: {p.goal}</li>
            <li>–ê–Ω–∞–ª—ñ–∑: {p.analysis || "‚Äì"}</li>
            <li>–ü—Ä–∏—á–∏–Ω–∏: {p.rootCauses?.join(", ") || "‚Äì"}</li>
            <li>–ü–ª–∞–Ω –¥—ñ–π: {p.actionPlan || "‚Äì"}</li>
            <li>–û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {p.expectedResults || "‚Äì"}</li>
            <li>–§–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {p.actualResults || "‚Äì"}</li>
            <li>–í–∏—Å–Ω–æ–≤–∫–∏: {p.conclusions || "‚Äì"}</li>
          </ul>
        </Box>

        <Box mt={2}>
          <Typography><strong>5 Why:</strong></Typography>
          {(p.fiveWhy || []).map((q, i) => (
            <Typography key={i}>–ß–æ–º—É: {q.why} ‚Üí –¢–æ–º—É —â–æ: {q.because}</Typography>
          ))}
        </Box>

        <Box mt={2}>
          <Typography><strong>Ishikawa (—Ä–∏–±—è—á–∞ –∫—ñ—Å—Ç–∫–∞):</strong></Typography>
          {(p.ishikawa || []).map((cat, i) => (
            <Typography key={i}>
              <strong>{cat.category}:</strong> {cat.causes.join(", ")}
            </Typography>
          ))}
        </Box>

        <Box mt={2}>
          <Typography><strong>–ö–∞—Ä—Ç–∞ –ø–æ—Ç–æ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ:</strong></Typography>
          {(p.vsm || []).map((step, i) => (
            <Typography key={i}>
              –ö—Ä–æ–∫ {i + 1}: {step.name} ‚Äì {step.time} —Å–µ–∫. –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {step.wait} —Å–µ–∫.
            </Typography>
          ))}
        </Box>

        <Box mt={2}>
          <Typography><strong>–ü–ª–∞–Ω –ø–æ–∫—Ä–∞—â–µ–Ω—å:</strong></Typography>
          {(p.improvements || []).map((item, i) => (
            <Typography key={i}>
              üîß {item.what} ‚Äì üë§ {item.who} ‚Äì üìÜ {item.when} ‚Äì üéØ {item.effect}
            </Typography>
          ))}
        </Box>

        <Box mt={2}>
          <Typography><strong>–ß–µ–∫–ª—ñ—Å—Ç —É—Å–ø—ñ—Ö—É:</strong></Typography>
          <ul>
            <li>‚úÖ –¶—ñ–ª—å –∑—Ä–æ–∑—É–º—ñ–ª–∞: {p.success?.goal ? "‚úÖ" : "‚ùå"}</li>
            <li>‚úÖ –ü—Ä–∏—á–∏–Ω–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ: {p.success?.causes ? "‚úÖ" : "‚ùå"}</li>
            <li>‚úÖ –ü–ª–∞–Ω —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π: {p.success?.plan ? "‚úÖ" : "‚ùå"}</li>
            <li>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ª—É—á–µ–Ω–∞: {p.success?.team ? "‚úÖ" : "‚ùå"}</li>
            <li>‚úÖ –Ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {p.success?.support ? "‚úÖ" : "‚ùå"}</li>
          </ul>
        </Box>

        <Box mt={3}>
          <Button variant="outlined" onClick={() => setSelectedProject(null)}>
            ‚Üê –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box p={4}>
      <Typography variant="h4" gutterBottom>
        –ú–æ—ó Lean-–ø—Ä–æ—î–∫—Ç–∏
      </Typography>

      <Button
        variant="contained"
        color="primary"
        sx={{ mb: 3 }}
        onClick={() => navigate("/lean-projects/create")}
      >
        + –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
      </Button>

      {projects.length === 0 ? (
        <Typography color="text.secondary">–ü—Ä–æ—î–∫—Ç—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.</Typography>
      ) : (
        <Grid container spacing={2}>
          {projects.map((project, index) => (
            <Grid key={project._id} item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography variant="h6">
                    #{index + 1}: {project.name}
                  </Typography>

                  <Typography variant="body2" color="text.secondary">
                    {project.description}
                  </Typography>

                  <Box mt={1}>
                    {project.principles.map((principle) => (
                      <Chip label={principle} key={principle} size="small" sx={{ mr: 1 }} />
                    ))}
                  </Box>

                  <Typography variant="caption" display="block" mt={2}>
                    –°—Ç–≤–æ—Ä–µ–Ω–æ: {new Date(project.createdAt).toLocaleDateString()}
                  </Typography>

                  <Box mt={2}>
                    <Button
                      variant="contained"
                      size="small"
                      href={`/lean-projects/show/${project._id}`}
                    >
                      –í–Ü–î–ö–†–ò–¢–ò
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
    </Box>
  );
};